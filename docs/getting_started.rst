.. Getting Started

=================================
Getting Started with Mamba Client
=================================

Create a new Mamba Client Project
=================================

Start a new Mamba Client Project, by creating a new folder. E.g. on Unix or MacOS

.. code:: console

    mkdir my_mamba_client

Then go the the newly created directory and initialize the Mamba Environment:

.. code:: console

    python3 -m venv venv

Once you’ve created a virtual environment, you can activate it.

On Windows, run:

.. code:: console

    venv\Scripts\activate.bat

On Unix or MacOS, run:
.. code:: console

    source venv/bin/activate

Then, install Mamba Client:

.. code:: console

    pip install mamba-client


Set Up an Editor
================
You can build a Mamba Client application using any text editor combined with the Mamba command-line tools.

Follow the steps below to get the set by step procedure to set-up the most common code editors: PyCharm or VS Code. If you want to use a different editor, that’s OK, skip ahead to the next chapter.

- `Set Up PyCharm for Mamba Client App Development <https://mamba-client.readthedocs.io/en/latest/set_up_pycharm.html>`__
- `Set Up Visual Code for Mamba Client App Development <https://mamba-client.readthedocs.io/en/latest/set_up_vscode.html>`__

Create your first Mamba Client Application
==========================================
First of all, start a default Mamba server as described in https://mamba-server.readthedocs.io/en/latest/getting_started.html

Create a new python file called my_client.py, and add the following content:

.. code:: python

    from mamba_client.station import Station, NetworkController

    network_controller_1 = NetworkController(host='127.0.0.1', port=8080)
    station = Station(station_id='station_1')

    station.add_instrument(instrument_id='signal_generator',
                           network_controller=network_controller_1)

    station.signal_generator.add_set_parameter(parameter_id='connect')
    station.signal_generator.add_get_parameter(parameter_id='connected')
    station.signal_generator.add_get_parameter(parameter_id='idn')

    station.signal_generator.connect.set(1)

    print(f'Connection status: {station.signal_generator.connected.get()}')
    print(f'Instrument ID: {station.signal_generator.idn.get()}')

    station.signal_generator.connect.set(0)

    print(f'Connection status: {station.signal_generator.connected.get()}')

In this example NetworkController establish the connection to the Mamba Server. Then then instrument "signal_generator" is added to the station. And afterwards 3 properties are added to the instrument.

Import a Complete Mamba Server Interface
========================================

Although the previous example is very powerful and allows for greater adaptation, many time we will be interested in importing a complete Mamba Server Interface without having to type all instrument and parameters.

First, we can dump a complete mamba server interface with the Mamba CLI utility as describe in https://mamba-server.readthedocs.io/en/latest/command_line.html

Next, we have to copy the mamba_if.json, generated by the previous command and import it into the station, with:

.. code:: python

    from mamba_client.station import Station, NetworkController

    network_controller_1 = NetworkController(host='127.0.0.1', port=8080)
    station = Station(station_id='station_1')

    station.import_dump_if('mamba_if.json', network_controller_1)

Now we will be able to use the complete interface of the imported Mamba Server.

Now you are ready to create you own Mamba Client Application!